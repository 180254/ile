version: "3.8"

name: ile-homeserver

networks:
  vnet:
    name: ile-base_vnet
    external: true

volumes:
  questdb_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/data_questdb

  grafana_data:
    driver_opts:
      o: bind
      type: none
      device: ${PWD}/data_grafana

services:
  questdb:
    build:
      context: ${PWD}/deps-dockerfiles
      dockerfile: questdb.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-questdb:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.20
    ports:
      - "8812:8812"
      - "9000:9000"
      - "9003:9003"
      - "9009:9009"
    environment:
      - QUESTDB_UID=${ILE_NONROOT_UID}
      - QUESTDB_GID=${ILE_NONROOT_GID}
      # https://questdb.io/docs/reference/configuration/
      # https://github.com/questdb/questdb/blob/7.3.1/core/src/main/java/io/questdb/PropertyKey.java
      # https://github.com/questdb/questdb/blob/7.3.1/core/src/main/java/io/questdb/PropServerConfiguration.java
      - QDB_PG_USER=${QDB_PG_USER}
      - QDB_PG_PASSWORD=${QDB_PG_PASSWORD}
      - QDB_PG_READONLY_USER_ENABLED=${QDB_PG_READONLY_USER_ENABLED}
      - QDB_PG_READONLY_USER=${QDB_PG_READONLY_USER}
      - QDB_PG_READONLY_PASSWORD=${QDB_PG_READONLY_PASSWORD}
      # https://github.com/questdb/questdb/issues/3512#issuecomment-1609046049
      - QDB_HTTP_MIN_WORKER_SLEEP_THRESHOLD=100
      - QDB_HTTP_WORKER_SLEEP_THRESHOLD=100
      - QDB_LINE_TCP_WRITER_WORKER_SLEEP_THRESHOLD=100
      - QDB_LINE_TCP_IO_WORKER_SLEEP_THRESHOLD=100
      - QDB_PG_WORKER_SLEEP_THRESHOLD=100
      - QDB_WAL_APPLY_WORKER_SLEEP_THRESHOLD=100
      - QDB_SHARED_WORKER_SLEEP_THRESHOLD=100
      # https://github.com/questdb/questdb/issues/3531
      - QDB_CAIRO_COMMIT_MODE=sync
    volumes:
      - questdb_data:/var/lib/questdb
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      # https://questdb.io/doc-s/operations/health-monitoring/
      test: timeout -s 15 5 curl -f http://127.0.0.1:9003 || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '2.00'
        reservations:
          cpus: '1.00'

  grafana:
    build:
      context: ${PWD}/deps-dockerfiles
      dockerfile: grafana-oss.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-grafana:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.21
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      # https://grafana.com/docs/grafana/latest/developers/http_api/other/#returns-health-information-about-grafana
      # https://github.com/grafana/grafana/pull/27536
      test: timeout -s 15 5 curl -f http://127.0.0.1:3000/api/health || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'

  shellyscraper:
    build:
      context: ${PWD}/ile_shellyscraper
      dockerfile: Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-shellyscraper:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.22
    ports:
      - "9080:9080"
      - "9081:9081"
    environment:
      - ILE_QUESTDB_HOST=192.168.130.20
      - ILE_QUESTDB_PORT=9009
      - ILE_SHELLY_IPS=${ILE_SHELLY_IPS}
      - ILE_DEBUG=${ILE_DEBUG}
      - ILE_CLOUD_MODE=false
      - ILE_SHELLY_GEN1_WEBHOOK_ENABLED=true
      - ILE_SHELLY_GEN1_WEBHOOK_BIND_HOST=0.0.0.0
      - ILE_SHELLY_GEN1_WEBHOOK_BIND_PORT=9080
      - ILE_SHELLY_GEN2_WEBSOCKET_ENABLED=true
      - ILE_SHELLY_GEN2_WEBSOCKET_BIND_HOST=0.0.0.0
      - ILE_SHELLY_GEN2_WEBSOCKET_BIND_PORT=9081
      - ILE_SHELLY_GEN1_AUTH_USERNAME=${ILE_SHELLY_GEN1_AUTH_USERNAME}
      - ILE_SHELLY_GEN1_AUTH_PASSWORD=${ILE_SHELLY_GEN1_AUTH_PASSWORD}
      - ILE_SHELLY_GEN2_AUTH_USERNAME=${ILE_SHELLY_GEN2_AUTH_USERNAME}
      - ILE_SHELLY_GEN2_AUTH_PASSWORD=${ILE_SHELLY_GEN2_AUTH_PASSWORD}
      - ILE_AUTH_TOKEN=${ILE_AUTH_TOKEN}
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      test: >
        timeout -s 15 5 socat -t5 -T5 /dev/null TCP:127.0.0.1:9080
        && timeout -s 15 5 socat -t5 -T5 /dev/null TCP:127.0.0.1:9081
        || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'

  # https://hub.docker.com/_/telegraf
  # https://www.influxdata.com/blog/docker-run-telegraf-as-non-root/
  telegraf:
    build:
      context: ${PWD}/deps-dockerfiles
      dockerfile: telegraf.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
    image: ile-homeserver-telegraf:0.0.1
    user: nonroot:999
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.23
    ports: [ ]
    hostname: ${HOSTNAME}
    environment:
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
      - HOST_MOUNT_PREFIX=/hostfs
      - ILT_SOCKET_WRITER_ADDRESS=tcp://192.168.130.20:9009
      - ILT_HEALTH_SERVICE_ADDRESS=http://127.0.0.1:8652
      - ILT_AGENT_INTERVAL=${ILT_AGENT_INTERVAL:-20s}
    volumes:
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${PWD}/ile_telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - ${PWD}/ile_telegraf/telegraf-noncloud.conf:/etc/telegraf/telegraf.d/telegraf-noncloud.conf:ro
    security_opt:
      # https://github.com/influxdata/telegraf/issues/6574
      - apparmor:unconfined
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      # https://github.com/influxdata/telegraf/blob/release-1.27/plugins/outputs/health/README.md
      test: timeout -s 15 5 curl -f http://127.0.0.1:8652 || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'

  tcp-cache-delivery-man:
    build:
      context: ${PWD}/ile_tcp_cache
      dockerfile: Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-tcp-cache:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.24
    environment:
      - ITC_PARCEL_COLLECTOR_ENABLED=false
      - ITC_DELIVERY_MAN_ENABLED=true
      - ITC_TARGET_TCP_HOST=192.168.130.20
      - ITC_TARGET_TCP_PORT=9009
      - ITC_REDIS_HOST=${ITC_REDIS_HOST}
      - ITC_REDIS_PORT=${ITC_REDIS_PORT}
      - ITC_REDIS_PASSWORD=${ITC_REDIS_PASSWORD}
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      test: timeout -s 15 5 true || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'
