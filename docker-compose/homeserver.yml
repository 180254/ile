name: ile-homeserver

networks:
  vnet:
    name: ile-base_vnet
    external: true

volumes:
  questdb_data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ${ILE_DIR}/data_questdb

  grafana_data:
    driver_opts:
      o: bind
      type: none
      device: ${ILE_DIR}/data_grafana

services:
  questdb:
    build:
      context: ${PWD}
      dockerfile: deps/questdb.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-questdb:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.20
    ports: [ ]
    environment:
      - QUESTDB_UID=${ILE_NONROOT_UID}
      - QUESTDB_GID=${ILE_NONROOT_GID}
      # https://questdb.io/docs/reference/configuration/
      # https://github.com/questdb/questdb/blob/8.2.1/core/src/main/java/io/questdb/PropertyKey.java
      # https://github.com/questdb/questdb/blob/8.2.1/core/src/main/java/io/questdb/PropServerConfiguration.java
      - QDB_PG_USER=${QDB_PG_USER}
      - QDB_PG_PASSWORD=${QDB_PG_PASSWORD}
      - QDB_PG_READONLY_USER_ENABLED=${QDB_PG_READONLY_USER_ENABLED}
      - QDB_PG_READONLY_USER=${QDB_PG_READONLY_USER}
      - QDB_PG_READONLY_PASSWORD=${QDB_PG_READONLY_PASSWORD}
      # https://github.com/questdb/questdb/issues/3512#issuecomment-1609046049
      - QDB_HTTP_MIN_WORKER_SLEEP_THRESHOLD=100
      - QDB_HTTP_WORKER_SLEEP_THRESHOLD=100
      - QDB_LINE_TCP_WRITER_WORKER_SLEEP_THRESHOLD=100
      - QDB_LINE_TCP_IO_WORKER_SLEEP_THRESHOLD=100
      - QDB_PG_WORKER_SLEEP_THRESHOLD=100
      - QDB_SHARED_WORKER_SLEEP_THRESHOLD=100
      - QDB_WAL_APPLY_WORKER_SLEEP_THRESHOLD=100
      # https://github.com/questdb/questdb/issues/3531
      - QDB_CAIRO_COMMIT_MODE=sync
    volumes:
      - questdb_data:/var/lib/questdb
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      # https://questdb.io/doc-s/operations/health-monitoring/
      test: timeout -s 15 5 curl -f http://127.0.0.1:9003 || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    # https://questdb.io/docs/deployment/capacity-planning/
    ulimits:
      nofile:
        soft: 1048576
        hard: 1048576
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '2.00'
        reservations:
          cpus: '1.00'

  grafana:
    build:
      context: ${PWD}
      dockerfile: deps/grafana-oss.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-grafana:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.21
    ports: [ ]
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      # https://grafana.com/docs/grafana/latest/developers/http_api/other/#returns-health-information-about-grafana
      # https://github.com/grafana/grafana/pull/27536
      test: timeout -s 15 5 curl -f http://127.0.0.1:3000/api/health || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'
    # https://github.com/grafana/grafana/blob/v11.4.0/Dockerfile
    entrypoint: >
      sh -c "
        mkdir -p /etc/grafana/provisioning/datasources && \
        echo '
        apiVersion: 1
        datasources:
          - name: questdb
            type: postgres
            access: proxy
            url: 192.168.130.20:8812
            database: qdb
            user: ${QDB_PG_READONLY_USER}
            secureJsonData:
              password: ${QDB_PG_READONLY_PASSWORD}
            jsonData:
              sslmode: disable
              postgresVersion: 1500
              timescaledb: false
              enableSecureSocksProxy: false
            isDefault: true
        ' > /etc/grafana/provisioning/datasources/questdb.yaml && \
        /run.sh
      "
  shellyscraper:
    build:
      context: ${ILE_DIR}
      dockerfile: ile_shellyscraper/ile_shellyscraper.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-shellyscraper:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.22
    ports:
      - "9080:9080" # SHELLY_GEN1_WEBHOOK
      - "9081:9081" # SHELLY_GEN2_WEBSOCKET
    environment:
      - ILE_QUESTDB_HOST=192.168.130.25
      - ILE_QUESTDB_PORT=9009
      - ILE_QUESTDB_SSL=true
      - ILE_QUESTDB_SSL_CAFILE=/tls/ca.pem
      - ILE_QUESTDB_SSL_CHECKHOSTNAME=true
      - ILE_DEBUG=${ILE_DEBUG}
      - ILE_ISS_CLOUD_MODE=false
      - ILE_ISS_SHELLY_IPS=${ILE_ISS_SHELLY_IPS}
      - ILE_ISS_SHELLY_SSL_IPS=${ILE_ISS_SHELLY_SSL_IPS}
      - ILE_ISS_SHELLY_SSL_IPS_VERIFY=${ILE_ISS_SHELLY_SSL_IPS_VERIFY}
      - ILE_ISS_SHELLY_GEN1_WEBHOOK_ENABLED=true
      - ILE_ISS_SHELLY_GEN1_WEBHOOK_BIND_HOST=0.0.0.0
      - ILE_ISS_SHELLY_GEN1_WEBHOOK_BIND_PORT=9080
      - ILE_ISS_SHELLY_GEN1_WEBHOOK_SSL=false
      - ILE_ISS_SHELLY_GEN1_WEBHOOK_SSL_CERTFILE=/tls/certfile.pem
      - ILE_ISS_SHELLY_GEN1_WEBHOOK_SSL_KEYFILE=/tls/keyfile.pem
      - ILE_ISS_SHELLY_GEN1_WEBHOOK_SSL_PASSWORD=${ILE_TLS_PASSWORD}
      - ILE_ISS_SHELLY_GEN2_WEBSOCKET_ENABLED=true
      - ILE_ISS_SHELLY_GEN2_WEBSOCKET_BIND_HOST=0.0.0.0
      - ILE_ISS_SHELLY_GEN2_WEBSOCKET_BIND_PORT=9081
      - ILE_ISS_SHELLY_GEN2_WEBSOCKET_SSL=true
      - ILE_ISS_SHELLY_GEN2_WEBSOCKET_SSL_CERTFILE=/tls/certfile.pem
      - ILE_ISS_SHELLY_GEN2_WEBSOCKET_SSL_KEYFILE=/tls/keyfile.pem
      - ILE_ISS_SHELLY_GEN2_WEBSOCKET_SSL_PASSWORD=${ILE_TLS_PASSWORD}
      - ILE_ISS_SHELLY_GEN1_AUTH_USERNAME=${ILE_ISS_SHELLY_GEN1_AUTH_USERNAME}
      - ILE_ISS_SHELLY_GEN1_AUTH_PASSWORD=${ILE_ISS_SHELLY_GEN1_AUTH_PASSWORD}
      - ILE_ISS_SHELLY_GEN2_AUTH_USERNAME=${ILE_ISS_SHELLY_GEN2_AUTH_USERNAME}
      - ILE_ISS_SHELLY_GEN2_AUTH_PASSWORD=${ILE_ISS_SHELLY_GEN2_AUTH_PASSWORD}
      - ILE_ISS_AUTH_TOKEN=${ILE_ISS_AUTH_TOKEN}
    volumes:
      - ${PWD}/tls/${ILE_ENV}/ca.pem:/tls/ca.pem:ro
      - ${PWD}/tls/${ILE_ENV}/homeserver.pem:/tls/certfile.pem:ro
      - ${PWD}/tls/${ILE_ENV}/homeserver-key-enc.pem:/tls/keyfile.pem:ro
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      test: >
        timeout -s 15 5 socat -t5 -T5 /dev/null TCP:127.0.0.1:9080
        && timeout -s 15 5 socat -t5 -T5 /dev/null TCP:127.0.0.1:9081
        || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
      haproxy-tls:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'

  # https://hub.docker.com/_/telegraf
  # https://www.influxdata.com/blog/docker-run-telegraf-as-non-root/
  telegraf:
    build:
      context: ${PWD}
      dockerfile: deps/telegraf.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
    image: ile-homeserver-telegraf:0.0.1
    user: nonroot:999
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.23
    ports: [ ]
    hostname: ${HOSTNAME}
    environment:
      - HOST_ETC=/hostfs/etc
      - HOST_PROC=/hostfs/proc
      - HOST_SYS=/hostfs/sys
      - HOST_VAR=/hostfs/var
      - HOST_RUN=/hostfs/run
      - HOST_MOUNT_PREFIX=/hostfs
      - ILE_ITF_SOCKET_WRITER_ADDRESS=tcp://192.168.130.25:9009
      - ILE_ITF_TLS_CA=/tls/ca.pem
      - ILE_ITF_TLS_INSECURE_SKIP_VERIFY=false
      - ILE_ITF_HEALTH_SERVICE_ADDRESS=http://127.0.0.1:8652
      - ILE_ITF_AGENT_INTERVAL=${ILE_ITF_AGENT_INTERVAL:-20s}
    volumes:
      - /:/hostfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${ILE_DIR}/ile_telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - ${ILE_DIR}/ile_telegraf/telegraf-writerssl.conf:/etc/telegraf/telegraf.d/telegraf-writerssl.conf:ro
      - ${ILE_DIR}/ile_telegraf/telegraf-noncloud.conf:/etc/telegraf/telegraf.d/telegraf-noncloud.conf:ro
      - ${PWD}/tls/${ILE_ENV}/ca.pem:/tls/ca.pem:ro
    security_opt:
      # https://github.com/influxdata/telegraf/issues/6574
      - apparmor:unconfined
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      # https://github.com/influxdata/telegraf/blob/release-1.28/plugins/outputs/health/README.md
      test: timeout -s 15 5 curl -f http://127.0.0.1:8652 || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
      haproxy-tls:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'

  tcp-cache:
    build:
      context: ${ILE_DIR}
      dockerfile: ile_tcp_cache/ile_tcp_cache.Dockerfile
      args:
        ILE_NONROOT_UID: ${ILE_NONROOT_UID}
        ILE_NONROOT_GID: ${ILE_NONROOT_GID}
      no_cache: false
      pull: true
    image: ile-homeserver-tcp-cache:0.0.1
    user: nonroot:nonroot
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.24
    environment:
      - ILE_ITC_PARCEL_COLLECTOR_ENABLED=false
      - ILE_ITC_DELIVERY_MAN_ENABLED=true
      - ILE_ITC_TARGET_TCP_HOST=192.168.130.25
      - ILE_ITC_TARGET_TCP_PORT=9009
      - ILE_ITC_TARGET_TCP_SSL=true
      - ILE_ITC_TARGET_TCP_SSL_CAFILE=/tls/ca.pem
      - ILE_ITC_TARGET_TCP_SSL_CHECKHOSTNAME=true
      - ILE_ITC_REDIS_HOST=${ILE_ITC_REDIS_HOST}
      - ILE_ITC_REDIS_PORT=${ILE_ITC_REDIS_PORT}
      - ILE_ITC_REDIS_PASSWORD=${ILE_ITC_REDIS_PASSWORD}
      - ILE_ITC_REDIS_SSL=${ILE_ITC_REDIS_SSL}
      - ILE_ITC_REDIS_SSL_CAFILE=/tls/ca.pem
      - ILE_ITC_REDIS_SSL_CHECKHOSTNAME=${ILE_ITC_REDIS_SSL_CHECKHOSTNAME}
    volumes:
      - ${PWD}/tls/${ILE_ENV}/ca.pem:/tls/ca.pem:ro
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      test: timeout -s 15 5 true || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
      haproxy-tls:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'

  haproxy-tls:
    build:
      context: ${PWD}
      dockerfile: deps/haproxy-homeserver.Dockerfile
      args:
        ILE_IDH_CRT_FILE: /tls/full.pem
        ILE_IDH_QUESTDB_HOST: 192.168.130.20
        ILE_IDH_QUESTDB_RESTAPI_USERNAME: ${ILE_IDH_QUESTDB_RESTAPI_USERNAME}
        ILE_IDH_QUESTDB_RESTAPI_PASSWORD: ${ILE_IDH_QUESTDB_RESTAPI_PASSWORD}
        ILE_IDH_GRAFANA_HOST: 192.168.130.21
        ILE_IDH_QUESTDB_STATS_USERNAME: ${ILE_IDH_QUESTDB_STATS_USERNAME}
        ILE_IDH_QUESTDB_STATS_PASSWORD: ${ILE_IDH_QUESTDB_STATS_PASSWORD}
      no_cache: false
      pull: true
    image: ile-homeserver-haproxy-tls:0.0.1
    user: haproxy:haproxy
    restart: always
    networks:
      vnet:
        ipv4_address: 192.168.130.25
    ports:
      - "4040:4040" # haproxy - stats
      - "8812:8812" # questdb - Postgres wire protocol
      - "9000:9000" # questdb - REST API and Web Console
      - "9003:9003" # questdb - Min health server and Prometheus metrics
      - "9009:9009" # questdb - InfluxDB line protocol
      - "3000:3000" # grafana
    volumes:
      - ${PWD}/tls/${ILE_ENV}/homeserver-full.pem:/tls/full.pem:ro
    logging:
      options:
        max-size: 10m
        max-file: 1
    healthcheck:
      test: timeout -s 15 5 curl -f http://127.0.0.1:80 || exit 1
      interval: 30s
      timeout: 10s
      start_period: 20s
      retries: 3
    depends_on:
      questdb:
        condition: service_started
        restart: true
      grafana:
        condition: service_started
        restart: true
    deploy:
      restart_policy:
        condition: any
        delay: 5s
      resources:
        limits:
          cpus: '0.4'
        reservations:
          cpus: '0.3'
